import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± D√©marrage du seeding de la base de donn√©es Dinitech...')

  try {
    // Nettoyer les donn√©es existantes (optionnel)
    console.log('üßπ Nettoyage des donn√©es existantes...')
    await prisma.postFile.deleteMany()
    await prisma.postTag.deleteMany()
    await prisma.comment.deleteMany()
    await prisma.file.deleteMany()
    await prisma.post.deleteMany()
    await prisma.contact.deleteMany()
    await prisma.tag.deleteMany()
    await prisma.setting.deleteMany()
    await prisma.user.deleteMany()

    // Cr√©er les param√®tres de base
    console.log('‚öôÔ∏è Cr√©ation des param√®tres...')
    const settings = await prisma.setting.createMany({
      data: [
        {
          key: 'site_title',
          value: 'Dinitech',
          type: 'STRING'
        },
        {
          key: 'site_description',
          value: 'Application Next.js avec Prisma et PostgreSQL',
          type: 'STRING'
        },
        {
          key: 'max_file_size',
          value: '52428800',
          type: 'NUMBER'
        },
        {
          key: 'allow_registration',
          value: 'true',
          type: 'BOOLEAN'
        },
        {
          key: 'theme_config',
          value: '{"primaryColor": "#3B82F6", "secondaryColor": "#10B981"}',
          type: 'JSON'
        }
      ]
    })

    // Cr√©er les utilisateurs de test
    console.log('üë• Cr√©ation des utilisateurs...')
    const alice = await prisma.user.create({
      data: {
        email: 'alice@dinitech.com',
        name: 'Alice Martin',
        avatar: null
      }
    })

    const bob = await prisma.user.create({
      data: {
        email: 'bob@dinitech.com',
        name: 'Bob Dupont',
        avatar: null
      }
    })

    const charlie = await prisma.user.create({
      data: {
        email: 'charlie@dinitech.com',
        name: 'Charlie Durand',
        avatar: null
      }
    })

    console.log(`‚úÖ ${3} utilisateurs cr√©√©s`)

    // Cr√©er les tags
    console.log('üè∑Ô∏è Cr√©ation des tags...')
    const techTag = await prisma.tag.create({
      data: {
        name: 'Technologie',
        slug: 'technologie',
        color: '#3B82F6'
      }
    })

    const nextjsTag = await prisma.tag.create({
      data: {
        name: 'Next.js',
        slug: 'nextjs',
        color: '#000000'
      }
    })

    const prismaTag = await prisma.tag.create({
      data: {
        name: 'Prisma',
        slug: 'prisma',
        color: '#2D3748'
      }
    })

    const tutorialTag = await prisma.tag.create({
      data: {
        name: 'Tutorial',
        slug: 'tutorial',
        color: '#10B981'
      }
    })

    console.log(`‚úÖ ${4} tags cr√©√©s`)

    // Cr√©er les posts
    console.log('üìù Cr√©ation des posts...')
    const post1 = await prisma.post.create({
      data: {
        title: 'Bienvenue sur Dinitech !',
        content: `Ceci est le premier post de notre application Next.js avec Prisma et PostgreSQL.

## Technologies utilis√©es

Notre stack technique moderne inclut :
- **Next.js 15** pour le framework React
- **Prisma** comme ORM pour la base de donn√©es
- **PostgreSQL** comme base de donn√©es relationnelle
- **TypeScript** pour le typage statique
- **TailwindCSS** pour le styling
- **Sharp** pour le traitement d'images

## Fonctionnalit√©s

L'application propose :
- Gestion compl√®te des utilisateurs
- Syst√®me de posts avec tags
- Upload et gestion de fichiers m√©dia
- Interface d'administration
- API REST compl√®te

Profitez de votre exploration !`,
        excerpt: 'Introduction √† l\'application Dinitech avec Next.js, Prisma et PostgreSQL.',
        published: true,
        featured: true,
        authorId: alice.id
      }
    })

    const post2 = await prisma.post.create({
      data: {
        title: 'Guide de d√©ploiement sur Ubuntu',
        content: `Ce guide d√©taille le processus de d√©ploiement d'une application Next.js avec Prisma sur un serveur Ubuntu.

## Pr√©requis

- Serveur Ubuntu 20.04+
- Node.js 18+
- PostgreSQL install√©
- Acc√®s SSH au serveur

## √âtapes principales

### 1. Installation des d√©pendances

\`\`\`bash
sudo apt update
sudo apt install postgresql nodejs npm
\`\`\`

### 2. Configuration de la base de donn√©es

\`\`\`bash
sudo -u postgres createuser dinitech_user
sudo -u postgres createdb dinitech_db
\`\`\`

### 3. D√©ploiement de l'application

\`\`\`bash
git clone votre-repo
npm install
npm run db:push
npm run build
\`\`\`

### 4. Configuration PM2

\`\`\`bash
pm2 start npm --name "dinitech" -- start
pm2 save
pm2 startup
\`\`\`

## Nginx et SSL

N'oubliez pas de configurer Nginx comme reverse proxy et d'installer un certificat SSL avec Let's Encrypt pour la production.`,
        excerpt: 'Guide complet pour d√©ployer une application Next.js avec Prisma sur Ubuntu.',
        published: true,
        featured: false,
        authorId: bob.id
      }
    })

    const post3 = await prisma.post.create({
      data: {
        title: 'Gestion avanc√©e des fichiers avec Sharp',
        content: `Notre syst√®me de gestion de fichiers utilise Sharp pour le traitement d'images.

## Fonctionnalit√©s

- Upload s√©curis√© de fichiers
- G√©n√©ration automatique de miniatures
- Support multi-format (images, vid√©os, documents)
- Validation des types MIME
- Limitation de taille configurable

## Types de fichiers support√©s

- **Images** : JPEG, PNG, GIF, WebP
- **Vid√©os** : MP4, MPEG, QuickTime
- **Documents** : PDF, Word, TXT
- **Archives** : ZIP, RAR, GZIP

## Organisation du stockage

Les fichiers sont organis√©s par cat√©gorie dans \`public/uploads/\` avec des sous-dossiers pour les originaux et les miniatures.`,
        excerpt: 'Syst√®me avanc√© de gestion de fichiers avec traitement d\'images automatique.',
        published: false,
        featured: false,
        authorId: alice.id
      }
    })

    const post4 = await prisma.post.create({
      data: {
        title: 'Optimisation des performances avec Prisma',
        content: `D√©couvrez comment optimiser les performances de votre application avec Prisma ORM.

## Strat√©gies d'optimisation

### 1. Relations intelligentes

Utilisez \`include\` et \`select\` pour charger seulement les donn√©es n√©cessaires :

\`\`\`typescript
const posts = await prisma.post.findMany({
  include: {
    author: {
      select: { name: true, email: true }
    },
    _count: {
      select: { comments: true }
    }
  }
})
\`\`\`

### 2. Index de base de donn√©es

Ajoutez des index sur les colonnes fr√©quemment requ√™t√©es :

\`\`\`prisma
model Post {
  // ...
  @@index([published, createdAt])
}
\`\`\`

### 3. Pagination

Impl√©mentez la pagination pour les listes importantes :

\`\`\`typescript
const posts = await prisma.post.findMany({
  skip: page * pageSize,
  take: pageSize,
  orderBy: { createdAt: 'desc' }
})
\`\`\`

## Monitoring

Utilisez Prisma Studio et les logs pour surveiller les performances de vos requ√™tes.`,
        excerpt: 'Techniques d\'optimisation pour am√©liorer les performances avec Prisma ORM.',
        published: true,
        featured: true,
        authorId: charlie.id
      }
    })

    console.log(`‚úÖ ${4} posts cr√©√©s`)

    // Relier les posts aux tags
    console.log('üîó Cr√©ation des relations posts-tags...')
    await prisma.postTag.createMany({
      data: [
        { postId: post1.id, tagId: techTag.id },
        { postId: post1.id, tagId: nextjsTag.id },
        { postId: post1.id, tagId: prismaTag.id },
        { postId: post2.id, tagId: tutorialTag.id },
        { postId: post2.id, tagId: nextjsTag.id },
        { postId: post3.id, tagId: techTag.id },
        { postId: post4.id, tagId: prismaTag.id },
        { postId: post4.id, tagId: tutorialTag.id }
      ]
    })

    // Cr√©er des commentaires
    console.log('üí¨ Cr√©ation des commentaires...')
    await prisma.comment.createMany({
      data: [
        {
          content: 'Excellent article ! Tr√®s utile pour d√©buter avec cette stack.',
          approved: true,
          postId: post1.id,
          authorId: bob.id
        },
        {
          content: 'Merci pour ce guide d√©taill√©. Le d√©ploiement s\'est tr√®s bien pass√©.',
          approved: true,
          postId: post2.id,
          authorId: charlie.id
        },
        {
          content: 'J\'aimerais voir plus d\'exemples de code pour le traitement d\'images.',
          approved: true,
          postId: post3.id,
          authorId: bob.id
        },
        {
          content: 'Super conseils d\'optimisation ! Mes requ√™tes sont beaucoup plus rapides maintenant.',
          approved: true,
          postId: post4.id,
          authorId: alice.id
        },
        {
          content: 'En attente de mod√©ration...',
          approved: false,
          postId: post1.id,
          authorId: charlie.id
        }
      ]
    })

    console.log(`‚úÖ ${5} commentaires cr√©√©s`)

    // Cr√©er des contacts de test
    console.log('üìß Cr√©ation des contacts...')
    await prisma.contact.createMany({
      data: [
        {
          name: 'Marie Laurent',
          email: 'marie@example.com',
          subject: 'Demande d\'information',
          message: 'Bonjour, je suis int√©ress√©e par vos services de d√©veloppement. Pouvez-vous me contacter pour discuter d\'un projet ?',
          read: false,
          replied: false
        },
        {
          name: 'Jean Moreau',
          email: 'jean@example.com',
          subject: 'F√©licitations',
          message: 'Excellent travail sur votre application ! L\'interface est tr√®s intuitive et les performances sont au rendez-vous.',
          read: true,
          replied: false
        },
        {
          name: 'Sophie Dubois',
          email: 'sophie@example.com',
          subject: 'Question technique',
          message: 'J\'ai une question concernant l\'int√©gration de Prisma avec Next.js. Serait-il possible d\'avoir des conseils ?',
          read: true,
          replied: true
        }
      ]
    })

    console.log(`‚úÖ ${3} contacts cr√©√©s`)

    // Statistiques finales
    const stats = {
      users: await prisma.user.count(),
      posts: await prisma.post.count(),
      publishedPosts: await prisma.post.count({ where: { published: true } }),
      comments: await prisma.comment.count(),
      approvedComments: await prisma.comment.count({ where: { approved: true } }),
      tags: await prisma.tag.count(),
      contacts: await prisma.contact.count(),
      settings: await prisma.setting.count()
    }

    console.log('\nüìä Statistiques finales:')
    console.log(`üë• Utilisateurs: ${stats.users}`)
    console.log(`üìù Posts: ${stats.posts} (${stats.publishedPosts} publi√©s)`)
    console.log(`üí¨ Commentaires: ${stats.comments} (${stats.approvedComments} approuv√©s)`)
    console.log(`üè∑Ô∏è Tags: ${stats.tags}`)
    console.log(`üìß Contacts: ${stats.contacts}`)
    console.log(`‚öôÔ∏è Param√®tres: ${stats.settings}`)

    console.log('\nüéâ Seeding termin√© avec succ√®s !')
    console.log('üåê Vous pouvez maintenant tester l\'application sur http://localhost:3000')
    console.log('üóÉÔ∏è Utilisez "npm run db:studio" pour voir les donn√©es dans Prisma Studio')

  } catch (error) {
    console.error('‚ùå Erreur lors du seeding:', error)
    throw error
  }
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error('‚ùå Erreur fatale:', e)
    await prisma.$disconnect()
    process.exit(1)
  })
